fn rotate_string(s: String, n: isize) -> String {
    let len = s.len();
    // Якщо рядок порожній, повертаємо його як є
    if len == 0 {
        return s;
    }

    // Обчислюємо фактичний зсув, щоб уникнути зайвих обчислень
    let n = n.rem_euclid(len as isize) as usize; // Зберігаємо зсув в межах довжини рядка

    // Розділяємо рядок на дві частини і з'єднуємо їх у новому порядку
    let (left, right) = s.split_at(len - n);
    format!("{}{}", right, left)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test() {
        let s = "abcdefgh".to_string();
        let shifts = [
            (0, "abcdefgh"),    // Без зсуву
            (8, "abcdefgh"),    // Зсув на повну довжину
            (-8, "abcdefgh"),   // Негативний зсув на повну довжину
            (1, "habcdefg"),    // Зсув на 1 вправо
            (2, "ghabcdef"),    // Зсув на 2 вправо
            (10, "ghabcdef"),   // Зсув на 10 (еквівалентно зсуву на 2)
            (-1, "bcdefgha"),   // Зсув на 1 вліво
            (-2, "cdefghab"),   // Зсув на 2 вліво
            (-10, "cdefghab"),  // Негативний зсув на 10 (еквівалентно зсуву на 2 вліво)
        ];

        shifts.iter().for_each(|(n, exp)| assert_eq!(rotate_string(s.clone(), *n), exp.to_string()));
    }
}

fn main() {
    // Основний код програми
}

/*
rotate_string
Приймає рядок s типу String та число n типу isize для зсуву.
Визначає довжину рядка len. Якщо рядок порожній, повертає його без змін.
Використовує rem_euclid, щоб обчислити фактичний зсув у межах довжини рядка (забезпечуючи, що зсув ніколи не перевищує довжину рядка).
Розділяє рядок на дві частини за допомогою split_at та з'єднує їх у новому порядку.

Тестовий модуль
Використовує атрибут #[cfg(test)] для визначення тестового модуля.
Містить функцію test, яка перевіряє різні випадки обертання рядка за допомогою assert_eq!.
Використовується метод clone() для копіювання рядка s, щоб уникнути конфліктів при тестуванні.

Функція rotate_string змінює порядок символів у рядку відповідно до заданого зсуву n.
Наприклад, rotate_string("abcdefgh".to_string(), 1) поверне "habcdefg",
а rotate_string("abcdefgh".to_string(), -1) поверне "bcdefgha".
*/